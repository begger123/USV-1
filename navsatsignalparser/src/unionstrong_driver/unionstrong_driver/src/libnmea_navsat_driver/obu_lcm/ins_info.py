"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class ins_info(object):
    __slots__ = ["gps_time", "week", "lat", "lon", "height", "lateral_speed", "longitudinal_speed", "down_speed", "roll", "pitch", "heading", "lateral_accelerate", "longitudinal_accelerate", "down_accelerate", "roll_speed", "pitch_speed", "heading_speed", "flag", "n"]

    def __init__(self):
        self.gps_time = 0.0
        self.week = 0
        self.lat = 0.0
        self.lon = 0.0
        self.height = 0.0
        self.lateral_speed = 0.0
        self.longitudinal_speed = 0.0
        self.down_speed = 0.0
        self.roll = 0.0
        self.pitch = 0.0
        self.heading = 0.0
        self.lateral_accelerate = 0.0
        self.longitudinal_accelerate = 0.0
        self.down_accelerate = 0.0
        self.roll_speed = 0.0
        self.pitch_speed = 0.0
        self.heading_speed = 0.0
        self.flag = 0
        self.n = 0

    def encode(self):
        buf = BytesIO()
        buf.write(ins_info._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">didddddddddddddddii", self.gps_time, self.week, self.lat, self.lon, self.height, self.lateral_speed, self.longitudinal_speed, self.down_speed, self.roll, self.pitch, self.heading, self.lateral_accelerate, self.longitudinal_accelerate, self.down_accelerate, self.roll_speed, self.pitch_speed, self.heading_speed, self.flag, self.n))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != ins_info._get_packed_fingerprint():
            raise ValueError("Decode error")
        return ins_info._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = ins_info()
        self.gps_time, self.week, self.lat, self.lon, self.height, self.lateral_speed, self.longitudinal_speed, self.down_speed, self.roll, self.pitch, self.heading, self.lateral_accelerate, self.longitudinal_accelerate, self.down_accelerate, self.roll_speed, self.pitch_speed, self.heading_speed, self.flag, self.n = struct.unpack(">didddddddddddddddii", buf.read(140))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if ins_info in parents: return 0
        tmphash = (0xa03eda4d928d4d92) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if ins_info._packed_fingerprint is None:
            ins_info._packed_fingerprint = struct.pack(">Q", ins_info._get_hash_recursive([]))
        return ins_info._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

